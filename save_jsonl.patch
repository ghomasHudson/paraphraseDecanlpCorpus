diff --git a/text/torchtext/datasets/generic.py b/text/torchtext/datasets/generic.py
index 3b15d70..32dc79d 100644
--- a/text/torchtext/datasets/generic.py
+++ b/text/torchtext/datasets/generic.py
@@ -23,6 +23,84 @@ CONTEXT_SPECIAL = 'Context:'
 QUESTION_SPECIAL = 'Question:'
 
 
+#****************************************************
+# Hooks to save as plain JSON
+
+def getStringProperties(obj):
+    '''Gets all properties of obj which are normal strings'''
+    goodProps = []
+    for prop in dir(obj):
+        if not prop.startswith('__') and prop not in ["answer","question","context","context_question"]:
+            val = getattr(obj,prop)
+            if not callable(val):
+                if True or (not type(val) == list):
+                    goodProps.append(prop)
+    return goodProps
+
+#hook into torch.save
+oldTorchSave = torch.save
+def tempTorchSave(obj,f):
+    '''Output to plain json before saving'''
+    #Do the origional torch save
+    oldTorchSave(obj,f)
+    extra_props = []
+    if type(obj) == tuple:
+        #if a tuple, find a list of examples
+        if type(obj) == dict:
+            extra_props = obj[1] #second positon is extra metadata
+        elif "woz" in f:
+            extra_props = [{"lang_dialogue_turn": o[0], "answer": o[1]} for o in obj[1]]
+        elif "srl" in f:
+            extra_props = [{"answerSplits": o} for o in obj[1]]
+        elif "squad" in f:
+            extra_props = [{"answerSplits": o} for o in obj[1]]
+            for i,e in enumerate(extra_props):
+                e["q_id"] = obj[2][i]
+        obj = obj[0]
+        '''
+        for item in obj:
+            if type(item) == list and type(item[0]) == data.Example:
+                obj = item
+        '''
+
+    if type(obj) == list and type(obj[0]) == data.Example:
+        #Convert to JSON
+        if type(f) == str:
+            with open(f+".jsonl",'w',encoding='utf-8') as jsonF:
+                for i,e in enumerate(obj,1):
+                    #find all the string properties of the example
+                    jsonOut = {}
+                    goodProps = getStringProperties(e)
+                    for prop in goodProps:
+                        propClean = prop.replace("Raw","")
+                        jsonOut[prop] = getattr(e,prop)
+                    if len(extra_props) > 0:
+                        for prop in extra_props[i-1].keys():
+                            jsonOut[prop] = extra_props[i-1][prop]
+                    jsonF.write(json.dumps(jsonOut))
+                    if i != len(obj):
+                        jsonF.write("\n")
+        else:
+            print("not file type")
+    else:
+        print("Not list of examples")
+torch.save = tempTorchSave
+
+#hook into data.Example.fromlist
+oldExampleFromList = data.Example.fromlist
+def tempExampleFromList(data, fields):
+    '''Add the raw text'''
+    example = oldExampleFromList(data, fields) #run existing method
+    #Add in the raw strings
+    example.contextRaw = data[0]
+    example.questionRaw = data[1]
+    example.answerRaw = data[2]
+    return example
+data.Example.fromlist = tempExampleFromList
+
+
+#****************************************************
+
 def get_context_question(context, question):
     return CONTEXT_SPECIAL +  ' ' + context + ' ' + QUESTION_SPECIAL + ' ' + question
